#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","aliases":[]},{"name":".NET","languageName":null,"aliases":[]},{"name":"html","languageName":"HTML","aliases":[]},{"name":"vscode","languageName":null,"aliases":["frontend"]}]}}

#!markdown

# Examples for use of the `Informedica.GenOrder.Lib` library

#!markdown

First load all the required references and source files

#!fsharp

#load "../Scripts/load.fsx"

open System
open MathNet.Numerics

open Informedica.GenUnits.Lib
open Informedica.GenOrder.Lib

#!markdown

Start up the logger which will retrieve all the calculation messages. This can be used for profiling the calculation code. When the logger start message is send, the logger will start with a clean logging que.

#!fsharp

let path = Some $"{__SOURCE_DIRECTORY__}/log.txt"

let logInformative = fun () -> OrderLogger.logger.Start path OrderLogger.Level.Informative

#!markdown

Now define a drug order. In this example a paracetamol suppository with the following constraints:

- There are supps with concentrations of 60, 120, 240 500 and 1000 mg per piece
- You can give the supp 2 to 4 times a day
- The max dose quantity is 1000 mg per time
- The max dose total is 4 gram per day
- The min adjusted dose total is 40 mg/kg/day and
- The max adjusted dose total is 90 mg/kg/day

**Note** The code will recognize a supp as something you want to give 1 per time, so this is an additional constraint.

The resulting dosing scenarios will then be printed out.

#!fsharp

logInformative ()

// Paracetamol supp example
// First define the drug order
{
    DrugOrder.drugOrder with
        Id = "1"
        Name = "paracetamol"
        Products = 
            [
                { 
                    DrugOrder.productComponent with 
                        Name = "paracetamol"
                        Quantities = [ 1N ]
                        TimeUnit = "day"
                        Substances =
                            [
                                {
                                    DrugOrder.substanceItem with
                                        Name = "paracetamol"
                                        Concentrations = 
                                            [ 60N; 120N; 240N; 500N; 1000N ]
                                        Unit = "mg"
                                        DoseUnit = "mg"
                                        TimeUnit = "day"
                                }
                            ]
                }
            ]
        Unit = "piece"
        TimeUnit = "day"
        Shape = "supp"
        Route = "rect"
        OrderType = DiscontinuousOrder
}
|> DrugOrder.toConstrainedOrder false
|> DrugOrder.setDoseRule
    {   DrugOrder.DoseRule.rule with
            Medication = "paracetamol"
            Shape = "suppository"
            Route = "rectal"
            OrderType = OrderType.DiscontinuousOrder
            Frequencies = [ 2N..4N ]            // Allowed frequencies are 2, 3 or 4 per day
            DoseUnit = "mg"
            AdjUnit = "kg"
            TimeUnit = "day"
            Limits = [
                {
                    DrugOrder.DoseRule.limit with
                        SubstanceName = "paracetamol"
                        MaxDoseQuantity = Some 1000N        // Max per single dose = 1000 mg
                        MaxDoseTotal = Some 4000N           // Max daily dose = 4000 mg/day
                        MinDoseTotalAdjust = Some 40N       // Min adjusted dose = 40 mg/kg/day
                        MaxDoseTotalAdjust = Some 90N       // Max adjusted daily dose = 90 mg/kg/day

                }
            ]
    }
|> DrugOrder.setAdjust "paracetamol" 10N 
|> DrugOrder.evaluate OrderLogger.logger.Logger      // Now calculate the scenarios for 10 kg
|> List.map (Order.printPrescription ["paracetamol"])

#!markdown

Another paracetemol example. However now we have a paracetamol solution. This means that there are a lot more dosing scenarios as a solution can be measured in milliliters instead of being constraint by 1 supp each time.

#!fsharp

logInformative ()

// Paracetamol drink
{
    DrugOrder.drugOrder with
        Id = "1"
        Name = "paracetamol"
        Products = 
            [
                { 
                    DrugOrder.productComponent with 
                        Name = "paracetamol"
                        Quantities = [ 100N ]
                        TimeUnit = "day"
                        Substances =
                            [
                                {
                                    DrugOrder.substanceItem with
                                        Name = "paracetamol"
                                        Concentrations = [ 24N ]
                                        Unit = "mg"
                                        DoseUnit = "mg"
                                        TimeUnit = "day"
                                }
                            ]
                }
            ]
        Unit = "ml"
        TimeUnit = "day"
        Shape = "drink"
        Route = "or"
        OrderType = DiscontinuousOrder
}
|> DrugOrder.toConstrainedOrder false
|> DrugOrder.setDoseRule
    {   DrugOrder.DoseRule.rule with
            Medication = "paracetamol"
            Frequencies = [ 2N ]
            DoseUnit = "mg"
            AdjUnit = "kg"
            TimeUnit = "day"
            Limits = [
                { DrugOrder.DoseRule.limit with
                    SubstanceName = "paracetamol"
                    MaxDoseQuantity = Some 1000N
                    MaxDoseTotal = Some 4000N
                    MinDoseTotalAdjust = Some 40N
                    MaxDoseTotalAdjust = Some 90N
                }                
            ]
    }
|> DrugOrder.setAdjust "paracetamol" 8N
|> DrugOrder.evaluate OrderLogger.logger.Logger      // Now calculate the scenarios for 10 kg
|> List.map (Order.printPrescription ["paracetamol"])

#!markdown

Now do this for a more complicated example in which a ``Component``, i.e. a product contains 2 ``Items``, i.e. substances. In this case *cotrimoxazol*, a drug with:

- sulfamethoxazol 100, 400 or 800 mg per tablet and
- trimethoprim 20, 80 or 160 mg per tablet

#!fsharp

logInformative ()

// Drug with multiple items
// cotrimoxazol for infection
{
    DrugOrder.drugOrder with
        Id = "1"
        Name = "cotrimoxazol"
        Products = 
            [
                { 
                    DrugOrder.productComponent with 
                        Name = "cotrimoxazol"
                        Quantities = [ 1N ]
                        Divisible = 1N
                        TimeUnit = "day"
                        Substances =
                            [
                                {
                                    DrugOrder.substanceItem with
                                        Name = "sulfamethoxazol"
                                        Concentrations = 
                                            [ 100N; 400N; 800N ]
                                        Unit = "mg"
                                        DoseUnit = "mg"
                                        TimeUnit = "day"
                                }
                                {
                                    DrugOrder.substanceItem with
                                        Name = "trimethoprim"
                                        Concentrations = 
                                            [ 20N; 80N; 160N ]
                                        Unit = "mg"
                                        DoseUnit = "mg"
                                        TimeUnit = "day"
                                }
                            ]
                }
            ]
        Unit = "tablet"
        TimeUnit = "day"
        Shape = "tablet"
        Route = "or"
        OrderType = DiscontinuousOrder
}
|> DrugOrder.toConstrainedOrder false
// setting dose limits for infection
|> DrugOrder.setDoseRule
    {   DrugOrder.DoseRule.rule with
            Medication = "cotrimoxazol"
            Frequencies = [ 2N ]
            DoseUnit = "mg"
            AdjUnit = "kg"
            TimeUnit = "day"
            Limits = [
                { DrugOrder.DoseRule.limit with
                    SubstanceName = "sulfamethoxazol"
                    MaxDoseTotal = Some 1600N
                    MaxDoseTotalAdjust = Some 30N
                }

                { DrugOrder.DoseRule.limit with
                    SubstanceName = "trimethoprim"
                    MaxDoseTotal = Some 320N
                    MaxDoseTotalAdjust = Some 6N
                }
            ]
    }
|> DrugOrder.setAdjust "cotrimoxazol" 10N
|> DrugOrder.evaluate OrderLogger.logger.Logger      // Now calculate the scenarios for 10 kg
|> List.map (Order.printPrescription ["sulfamethoxazol"; "trimethoprim"])

#!markdown

The same *cotrimoxazol* example, but now contained in a drinkable solution.

#!fsharp

logInformative ()

// Drug with multiple items
// cotrimoxazol drink for infection
{
    DrugOrder.drugOrder with
        Id = "1"
        Name = "cotrimoxazol"
        Products = 
            [
                { 
                    DrugOrder.productComponent with 
                        Name = "cotrimoxazol"
                        Quantities = [ 1N ]
                        TimeUnit = "day"
                        Substances =
                            [
                                {
                                    DrugOrder.substanceItem with
                                        Name = "sulfamethoxazol"
                                        Concentrations = 
                                            [ 40N ]
                                        Unit = "mg"
                                        DoseUnit = "mg"
                                        TimeUnit = "day"
                                }
                                {
                                    DrugOrder.substanceItem with
                                        Name = "trimethoprim"
                                        Concentrations = 
                                            [ 8N ]
                                        Unit = "mg"
                                        DoseUnit = "mg"
                                        TimeUnit = "day"
                                }
                            ]
                }
            ]
        Unit = "ml"
        TimeUnit = "day"
        Shape = "drink"
        Route = "or"
        OrderType = DiscontinuousOrder
}
|> DrugOrder.toConstrainedOrder false
// setting dose limits for infection
|> DrugOrder.setDoseRule
    {   DrugOrder.DoseRule.rule with
            Medication = "cotrimoxazol"
            Frequencies = [ 2N ]
            DoseUnit = "mg"
            AdjUnit = "kg"
            TimeUnit = "day"
            Limits = [
                { DrugOrder.DoseRule.limit with
                    SubstanceName = "sulfamethoxazol"
                    MaxDoseTotal = Some 1600N
                    MaxDoseTotalAdjust = Some 30N
                }

                { DrugOrder.DoseRule.limit with
                    SubstanceName = "trimethoprim"
                    MaxDoseTotal = Some 320N
                    MaxDoseTotalAdjust = Some 6N
                }
            ]
    }
|> DrugOrder.setAdjust "cotrimoxazol" 10N
|> DrugOrder.evaluate OrderLogger.logger.Logger      // Now calculate the scenarios for 10 kg
|> List.map (Order.printPrescription ["sulfamethoxazol"; "trimethoprim"])

#!markdown

But a ``Component`` cannot only have multiple ``Items``, multiple ``Components`` can be added to an ``Orderable``. For example:

- A dopamin pump infusion using a syringe of 50 ml, i.e. the ``Orderable``.
- Contains a product dopamin, with the substance dopamin, i.e. a ``Component`` with one ``Item``.
- And also contains a product normal saline which contains 2 electrolytes, sodium and chloride. So, another ``Component``, this one with 2 ``Items``.

#!fsharp

logInformative ()

// Dopamin infusion calculate scenario's 
// with a number of standard solutions
{
    DrugOrder.drugOrder with
        Id = "1"
        Name = "dopamin infusion"
        Quantities = [ 50N ]
        Unit = "ml"
        TimeUnit = "day"
        Shape = "infusion fluid"
        Route = "iv"
        Products = 
            [
                { 
                    DrugOrder.productComponent with
                        Name = "dopamin"
                        Quantities = [ 5N ]
                        Divisible = 10N
                        TimeUnit = "day"
                        Substances = 
                            [
                                {
                                    DrugOrder.substanceItem with
                                        Name = "dopamin"
                                        Concentrations = [ 40N ]
                                        OrderableQuantities = [ 80N; 200N; 400N ]
                                        Unit = "mg"
                                        DoseUnit = "mcg"
                                        TimeUnit = "min"
                                }
                            ]

                }
                { 
                    DrugOrder.productComponent with
                        Name = "saline"
                        Quantities = [ 5000N ]
                        Divisible = 10N
                        TimeUnit = "day"
                        Substances = 
                            [
                                {
                                    DrugOrder.substanceItem with
                                        Name = "sodium"
                                        Concentrations = [ 155N / 1000N ]
                                        Unit = "mmol"
                                        DoseUnit = "mmol"
                                        TimeUnit = "day"
                                }
                                {
                                    DrugOrder.substanceItem with
                                        Name = "chloride"
                                        Concentrations = [ 155N / 1000N ]
                                        Unit = "mmol"
                                        DoseUnit = "mmol"
                                        TimeUnit = "day"
                                }
                            ]

                }
            ]
        OrderType = ContinuousOrder
}
|> DrugOrder.toConstrainedOrder false
// setting dose limits for infection
|> DrugOrder.setDoseRule
    {   DrugOrder.DoseRule.rule with
            Medication = "dopamin infusion"
            Limits = [
                { DrugOrder.DoseRule.limit with
                    SubstanceName = "dopamin"
                    MinDoseRateAdjust = Some 2N
                    MaxDoseRateAdjust = Some 20N
                }
            ]
    }
|> DrugOrder.setAdjust "dopamin" 10N
|> DrugOrder.evaluate OrderLogger.logger.Logger      // Now calculate the scenarios for 10 kg
|> List.map (Order.printPrescription ["dopamin"])

#!markdown

A different way to calculate the same dopamine pump infusion order.

#!fsharp

logInformative ()

// Dopamin infusion calculate scenario's 
// with a a fixed infusion - dose rate
{
    DrugOrder.drugOrder with
        Id = "1"
        Name = "dopamin infusion"
        Quantities = [ 50N ]
        Unit = "ml"
        TimeUnit = "day"
        Shape = "infusion fluid"
        Route = "iv"
        Products = 
            [
                { 
                    DrugOrder.productComponent with
                        Name = "dopamin"
                        Quantities = [ 5N ]
                        Divisible = 1N
                        TimeUnit = "day"
                        Substances = 
                            [
                                {
                                    DrugOrder.substanceItem with
                                        Name = "dopamin"
                                        Concentrations = [ 40N ]
                                        Unit = "mg"
                                        DoseUnit = "mcg"
                                        TimeUnit = "min"
                                }
                            ]

                }
                { 
                    DrugOrder.productComponent with
                        Name = "saline"
                        Quantities = [ 5000N ]
                        Divisible = 1N
                        TimeUnit = "day"
                        Substances = 
                            [
                                {
                                    DrugOrder.substanceItem with
                                        Name = "sodium"
                                        Concentrations = [ 155N / 1000N ]
                                        Unit = "mmol"
                                        DoseUnit = "mmol"
                                        TimeUnit = "day"
                                }
                                {
                                    DrugOrder.substanceItem with
                                        Name = "chloride"
                                        Concentrations = [ 155N / 1000N ]
                                        Unit = "mmol"
                                        DoseUnit = "mmol"
                                        TimeUnit = "day"
                                }
                            ]

                }
            ]
        OrderType = ContinuousOrder
}
|> DrugOrder.toConstrainedOrder false
// setting dose limits for infection
|> DrugOrder.setDoseRule
    {   DrugOrder.DoseRule.rule with
            Medication = "dopamin infusion"
            Limits = [
                { DrugOrder.DoseRule.limit with
                    SubstanceName = "dopamin"
                    MinDoseRateAdjust = Some 2N
                    MaxDoseRateAdjust = Some 20N
                }
            ]
    }
|> DrugOrder.setAdjust "dopamin" 10N
|> DrugOrder.evaluate OrderLogger.logger.Logger      // Now calculate the scenarios for 10 kg
|> List.map (Order.printPrescription ["dopamin"])

#!markdown

An even more complicated example is the calculation of gentamicin, an antibiotic, which is contained in a solution (so 2 ``Components`` are involved), and is infused over a certain amount of time.

#!fsharp

logInformative ()

// gentamicin
{
    DrugOrder.drugOrder with
        Id = "1"
        Name = "gentamicin"
        Quantities = [ ]
        Unit = "ml"
        TimeUnit = "day"
        Shape = "infusion fluid"
        Route = "iv"
        Products = 
            [
                { 
                    DrugOrder.productComponent with
                        Name = "gentamicin"
                        Quantities = [ 2N; 10N ]
                        Divisible = 1N 
                        TimeUnit = "day"
                        Substances = 
                            [
                                {
                                    DrugOrder.substanceItem with
                                        Name = "gentamicin"
                                        Concentrations = [ 10N; 40N ]
                                        Unit = "mg"
                                        DoseUnit = "mg"
                                        TimeUnit = "day"
                                }
                            ]

                }
                { 
                    DrugOrder.productComponent with
                        Name = "saline"
                        Quantities = [ 5000N ]
                        Divisible = 1N 
                        TimeUnit = "day"
                        Substances = 
                            [
                                {
                                    DrugOrder.substanceItem with
                                        Name = "sodium"
                                        Concentrations = [ 155N / 1000N ]
                                        Unit = "mmol"
                                        DoseUnit = "mmol"
                                        TimeUnit = "day"
                                }
                                {
                                    DrugOrder.substanceItem with
                                        Name = "chloride"
                                        Concentrations = [ 155N / 1000N ]
                                        Unit = "mmol"
                                        DoseUnit = "mmol"
                                        TimeUnit = "day"
                                }
                            ]

                }

            ]
        OrderType = TimedOrder
    }
|> DrugOrder.toConstrainedOrder false
|> DrugOrder.setAdjust "gentamicin" 4N
|> DrugOrder.setDoseRule
    {   DrugOrder.DoseRule.rule with
            Medication = "gentamicin"
            Frequencies = [ 1N ]
            Limits = [
                { DrugOrder.DoseRule.limit with
                    SubstanceName = "gentamicin"
                    MinDoseTotalAdjust = Some 4N
                    MaxDoseTotalAdjust = Some 6N
                }                
            ]
    }
|> DrugOrder.setSolutionRule false
    { DrugOrder.SolutionRule.rule with
        Medication = "gentamicin"
        Solutions = ["saline"]
        Quantities = [5N;10N;20N;50N;100N;200N]
        RateUnit = "hour"
        Limits = [
            { DrugOrder.SolutionRule.limit with
                SubstanceName = "gentamicin"
                MinConcentration = Some (1N/10N)
                MaxConcentration = Some (2N/10N)
            }
        ]

    }
|> DrugOrder.evaluate OrderLogger.logger.Logger      // Now calculate the scenarios for 10 kg
|> List.map (Order.printPrescription ["gentamicin"])
